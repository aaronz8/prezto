set nocompatible
filetype off

set title
set titlestring=nvim:\ %-25.55f\ %a%r%m titlelen=24

"auto-install vim-plug
if empty(glob("~/.vim/autoload/plug.vim"))
    execute '!curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.github.com/junegunn/vim-plug/master/plug.vim'
    autocmd VimEnter * PlugInstall
endif

call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-dispatch'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'airblade/vim-gitgutter'
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'crusoexia/vim-monokai'
Plug 'slashmili/alchemist.vim', { 'for': 'elixir' }
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/rainbow_parentheses.vim'
Plug 'jbmorgado/vim-pine-script'
Plug 'scrooloose/nerdcommenter'
Plug 'ludovicchabant/vim-gutentags'
Plug 'sheerun/vim-polyglot'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'mattn/emmet-vim'
Plug 'Quramy/vim-js-pretty-template'
Plug 'liuchengxu/vista.vim'
Plug 'sebdah/vim-delve'
Plug 'rust-lang/rust.vim'

" Experimenting
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install'  }
Plug 'junegunn/vim-slash'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
Plug 'junegunn/vim-easy-align'

"Plug 'github/copilot.vim'
Plug 'Exafunction/codeium.vim', { 'branch': 'main' }

"Plug 'ervandew/supertab' "replaced by coc.nvim
"Plug 'jistr/vim-nerdtree-tabs' "deprecated
"Plug 'vim-syntastic/syntastic' "replaced by coc.nvim
"Plug 'rking/ag.vim'
"Plug 'kien/ctrlp.vim'
"Plug 'elixir-lang/vim-elixir', { 'for': 'elixir' }
"Plug 'lambdatoast/elm.vim', { 'for': 'elm' }
"Plug 'kchmck/vim-coffee-script', { 'for': 'coffeescript' }
"Plug 'tomlion/vim-solidity'
"Plug 'majutsushi/tagbar'
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
"Plug 'maxmellon/vim-jsx-pretty'
"Plug 'iamcco/coc-tailwindcss',  {'do': 'yarn install --frozen-lockfile && yarn run build'}
"Plug 'iamcco/coc-svg', {'do': 'yarn install --frozen-lockfile && yarn run build'}

call plug#end()

" Goyo/Limelight integration
"autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!
nnoremap <leader>df :Goyo<CR>
nnoremap <leader>dF :Goyo \| :Limelight<CR>

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" nerdtree-git-plugin
let g:NERDTreeGitStatusIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }

"let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_theme='night_owl'

set autoindent noexpandtab tabstop=2 shiftwidth=2
autocmd FileType markdown setlocal expandtab shiftwidth=2 tabstop=2
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType helm setlocal ts=2 sts=2 sw=2 expandtab

set incsearch
" set shiftwidth=2
" set expandtab
" set autoindent
" set softtabstop=2
if !has('nvim')
  set ttymouse=xterm2
endif
set mouse=a

colorscheme monokai
set termguicolors
let g:rehash256 = 1

"Highlighting
syntax on
set hlsearch
" Line Numbers
set nu
" Ignore case when searching unless search string contains upper case
"set ignorecase
"set smartcase
set laststatus=2
set ruler
set rulerformat=%25([%{&fileformat}]%14(%l,%c%V%)%=%4P%)

set backspace=2
set hidden

"Indent
"set cindent
"set cinoptions=(0

"Indent colors
set background=dark
"hi! EndOfBuffer ctermbg=bg ctermfg=bg guibg=bg guifg=bg
"highlight Normal guibg=none guifg=none
"highlight ColorColumn guibg=none guifg=none
"highlight LineNr guibg=none guifg=none

"folding
set foldmethod=syntax
"set foldlevelstart=1
"
"let javaScript_fold=1         " JavaScript
"let perl_fold=1               " Perl
"let php_folding=1             " PHP
"let r_syntax_folding=1        " R
"let ruby_fold=1               " Ruby
"let sh_fold_enabled=1         " sh
"let vimsyn_folding='af'       " Vim script
"let xml_syntax_folding=1      " XML

" Automatic formatting
autocmd BufWritePre *.rb :%s/\s\+$//e
autocmd BufWritePre *.go :%s/\s\+$//e
autocmd BufWritePre *.haml :%s/\s\+$//e
autocmd BufWritePre *.html :%s/\s\+$//e
autocmd BufWritePre *.scss :%s/\s\+$//e
autocmd BufWritePre *.slim :%s/\s\+$//e

" format the entire file
nmap <leader>fef ggVG=

" Search setup
nnoremap <silent> <F4> :call <SID>SearchMode()<CR>
function s:SearchMode()
  if !exists('s:searchmode') || s:searchmode == 0
    echo 'Search next: scroll hit to middle if not on same page'
    nnoremap <silent> n n:call <SID>MaybeMiddle()<CR>
    nnoremap <silent> N N:call <SID>MaybeMiddle()<CR>
    let s:searchmode = 1
  elseif s:searchmode == 1
    echo 'Search next: scroll hit to middle'
    nnoremap n nzz
    nnoremap N Nzz
    let s:searchmode = 2
  else
    echo 'Search next: normal'
    nunmap n
    nunmap N
    let s:searchmode = 0
  endif
endfunction

" If cursor is in first or last line of window, scroll to middle line.
function s:MaybeMiddle()
  if winline() == 1 || winline() == winheight(0)
    normal! zz
  endif
endfunction

" CtrlP
"let g:ctrlp_working_path_mode = 'ra'
"" let g:ctrlp_by_filename = 1
"" let g:ctrlp_max_files = 1000
"" let g:ctrlp_max_depth = 5
"let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']

" NERDCommenter
let g:NERDCustomDelimiters = { 'helm': { 'left': '# ' } }

" NERDTree
autocmd vimenter * NERDTree
autocmd vimenter * wincmd p
nmap <leader>n :NERDTreeToggle<CR>
let NERDTreeHighlightCursorline=1

" NERDTree enable for 'vim' and 'vim .'
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" Vim exit if NERDTree is last window
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" remove brackets
let g:NERDTreeGitStatusConcealBrackets = 1

" These are spaces bcz the NERDTree is too close to side panel
let g:NERDTreeDirArrowExpandable = ''
let g:NERDTreeDirArrowCollapsible = ''

" For starting NERDTree when vim is opened on a directory
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif

function! NERDTreeIsOpen()
  return exists("t:NERDTreeBufName") && (bufwinnr(t:NERDTreeBufName) != -1) && g:NERDTree.IsOpen()
endfunction

function! NERDTreeSync()
  if &modifiable && !&diff && NERDTreeIsOpen() && strlen(expand('%')) > 0 && bufname('%') !~# "^NERD_tree_"
    NERDTreeFind
    setlocal cursorline
    wincmd p
  endif
endfunction

" Auto sync
autocmd bufenter * call NERDTreeSync()


" Syntastic
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*

"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0

"let g:syntastic_javascript_checkers = ['eslint']

" Git shortcuts
nnoremap <space>gb :Git branch<Space>
nnoremap <space>gc :Git commit --verbose<CR>
nnoremap <space>gca :Git commit --verbose --all<CR>
nnoremap <space>gco :Git checkout<Space>
nnoremap <space>gfm :Dispatch! git pull<CR>
nnoremap <space>gg :GGrep<Space>
nnoremap <space>gm :Git merge<Space>
nnoremap <space>gwS :Gstatus<CR>
nnoremap <space>gd :Gdiff<CR>

"Create :Find command for fzf and rg
" --column: Show column number
" --line-number: Show line number
" --no-heading: Do not show file headings in results
" --fixed-strings: Search term as a literal string
" --ignore-case: Case insensitive search
" --no-ignore: Do not respect .gitignore, etc...
" --hidden: Search hidden files and folders
" --follow: Follow symlinks
" --glob: Additional conditions for search (in this case ignore everything in the .git/ folder)
" --color: Search color options
command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>), 1, <bang>0)
command! -bang -nargs=* GGrep
  \ call fzf#vim#grep(
  \   'git grep --line-number -- '.shellescape(<q-args>), 0,
  \   fzf#vim#with_preview({'dir': systemlist('git rev-parse --show-toplevel')[0]}), <bang>0)
nnoremap <C-p> :Files<CR>
nnoremap <space>ff :GFiles<CR>
nnoremap <space>rg :Rg<CR>
nnoremap <space>fb :Buffers<CR>
nnoremap <space>ft :Tags<CR>
nnoremap <space>gl :Commits<CR>
nnoremap <space>gll :BCommits<CR>
let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }

" Buffer shortcuts
nnoremap <BS> <C-^>

" Vista
nnoremap <leader>v :Vista!!<CR>

"use ripgrep for grepprg
set grepprg=rg\ --vimgrep\ --no-heading

if !has('nvim')
	set clipboard=unnamed
endif
if has('nvim')
	set clipboard+=unnamedplus
endif

inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>"
let g:coc_global_extensions = [
      \  'coc-json',
      \  'coc-css',
      \  'coc-emmet',
      \  'coc-highlight',
      \  'coc-html',
      \  'coc-dictionary',
      \  'coc-emoji',
      \  'coc-tag',
      \  'coc-pairs',
      \  'coc-snippets',
      \  'coc-yaml',
      \  'coc-eslint',
      \  'coc-prettier',
      \  'coc-tslint',
      \  'coc-tsserver',
      \  'coc-tailwindcss',
			\  'coc-svg'
			"\  'coc-go'
      \ ]

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

"let g:go_fmt_autosave = 1
"let g:go_mod_fmt_autosave = 1
"let g:go_asmfmt_autosave = 1
"let GoMetaLinterAutoSaveToggle = 1
autocmd BufWritePre *.go :call CocAction('runCommand', 'editor.action.organizeImport')

let g:gutentags_add_default_project_roots = 0
let g:gutentags_project_root  = ['package.json', '.git', '.hg', '.svn', 'go.mod']
let g:gutentags_cache_dir = expand('~/.gutentags_cache')
"let g:gutentags_exclude_filetypes = ['gitcommit', 'gitconfig', 'gitrebase', 'gitsendemail', 'git']
let g:gutentags_generate_on_new = 1
let g:gutentags_generate_on_missing = 1
let g:gutentags_generate_on_write = 1
let g:gutentags_generate_on_empty_buffer = 0
let g:gutentags_ctags_extra_args = ['--tag-relative=yes', '--fields=+ailmnS']

let g:gutentags_ctags_exclude = [
      \ 'gitcommit', 'gitconfig', 'gitrebase', 'gitsendemail', 'git',
      \ '*.git', '*.svg', '*.hg',
      \ '*/tests/*',
      \ 'build',
      \ 'dist',
      \ '*sites/*/files/*',
      \ 'bin',
      \ 'node_modules',
      \ 'bower_components',
      \ 'cache',
      \ 'compiled',
      \ 'docs',
      \ 'example',
      \ 'bundle',
      \ 'vendor',
      \ '*.md',
      \ '*-lock.json',
      \ '*.lock',
      \ '*bundle*.js',
      \ '*build*.js',
      \ '.*rc*',
      \ '*.json',
      \ '*.min.*',
      \ '*.map',
      \ '*.bak',
      \ '*.zip',
      \ '*.pyc',
      \ '*.class',
      \ '*.sln',
      \ '*.Master',
      \ '*.csproj',
      \ '*.tmp',
      \ '*.csproj.user',
      \ '*.cache',
      \ '*.pdb',
      \ 'tags*',
      \ 'cscope.*',
      \ '*.css',
      \ '*.less',
      \ '*.scss',
      \ '*.exe', '*.dll',
      \ '*.mp3', '*.ogg', '*.flac',
      \ '*.swp', '*.swo',
      \ '*.bmp', '*.gif', '*.ico', '*.jpg', '*.png',
      \ '*.rar', '*.zip', '*.tar', '*.tar.gz', '*.tar.xz', '*.tar.bz2',
      \ '*.pdf', '*.doc', '*.docx', '*.ppt', '*.pptx',
      \ ]


"let g:user_emmet_install_global = 0
"autocmd FileType html,css,javascript EmmetInstall

"call jspretmpl#register_tag('gql', 'graphql')
call jspretmpl#register_tag('graphql', 'graphql')
call jspretmpl#register_tag('pug', 'pug')
autocmd FileType javascript JsPreTmpl
autocmd FileType javascript.jsx jsPreTmpl

" rust.vim config
let g:rustfmt_autosave = 1
